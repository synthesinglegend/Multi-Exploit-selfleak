#include <iostream>
#include <cstdlib>
#define _CRT_SECURE_NO_WARNINGS
#define _WINSOCKAPI_    // stops windows.h including winsock.h
#pragma comment(lib, "ws2_32.lib")
#include <windows.h>
#include "wtypes.h"
#include <iomanip>
#include "ShellAPI.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include<windows.h>
#include <psapi.h>
#include <wininet.h>
#pragma comment(lib, "Wininet.lib")
#include <conio.h>
#include "colors.h"
#include <urlmon.h>
#pragma comment (lib, "urlmon.lib")
#include "exploit_download.h"
Colors colors;
bool bConnected;
#include "skCrypter.h"
#include "hisilicon.h"
#include "defeway.h"
#include <filesystem>
#include "zoomeye.h"
#include <filesystem>
#include "pre_init.h"
#include "HTTPRequest.hpp"
#include "hikvision_masterkey.h"
#include "scoop_file.h"
typedef enum WINDOWCOMPOSITIONATTRIB {
	WCA_UNDEFINED,
	WCA_NCRENDERING_ENABLED,
	WCA_NCRENDERING_POLICY,
	WCA_TRANSITIONS_FORCEDISABLED,
	WCA_ALLOW_NCPAINT,
	WCA_CAPTION_BUTTON_BOUNDS,
	WCA_NONCLIENT_RTL_LAYOUT,
	WCA_FORCE_ICONIC_REPRESENTATION,
	WCA_EXTENDED_FRAME_BOUNDS,
	WCA_HAS_ICONIC_BITMAP,
	WCA_THEME_ATTRIBUTES,
	WCA_NCRENDERING_EXILED,
	WCA_NCADORNMENTINFO,
	WCA_EXCLUDED_FROM_LIVEPREVIEW,
	WCA_VIDEO_OVERLAY_ACTIVE,
	WCA_FORCE_ACTIVEWINDOW_APPEARANCE,
	WCA_DISALLOW_PEEK,
	WCA_CLOAK,
	WCA_CLOAKED,
	WCA_ACCENT_POLICY,
	WCA_FREEZE_REPRESENTATION,
	WCA_EVER_UNCLOAKED,
	WCA_VISUAL_OWNER,
	WCA_LAST,
} WINDOWCOMPOSITIONATTRIB;
typedef struct WINDOWCOMPOSITIONATTRIBDATA {
	WINDOWCOMPOSITIONATTRIB Attrib;
	PVOID pvData;
	SIZE_T cbData;
} WINDOWCOMPOSITIONATTRIBDATA;
typedef enum ACCENT_STATE {
	ACCENT_DISABLED,
	ACCENT_ENABLE_GRADIENT,
	ACCENT_ENABLE_TRANSPARENTGRADIENT,
	ACCENT_ENABLE_BLURBEHIND,
	ACCENT_INVALID_STATE
} ACCENT_STATE;
typedef struct ACCENT_POLICY {
	ACCENT_STATE AccentState;
	DWORD AccentFlags;
	DWORD GradientColor;
	DWORD AnimationId;
} ACCENT_POLICY;
typedef BOOL(WINAPI* pfnSetWindowCompositionAttribute)(HWND, WINDOWCOMPOSITIONATTRIBDATA*);
static auto SetWindowCompositionAttribute = (pfnSetWindowCompositionAttribute)GetProcAddress(LoadLibrary(L"user32.dll"), "SetWindowCompositionAttribute");



void init() {
	
	else
	{
		bConnected = false;
	}
}
int choice = 0;
int launchmore;
int* pChoice{ &choice };
char const* build_date()
{
	return __DATE__;
}

char const* build_time()
{
	return __TIME__;
}
void input() 
{
	
	wprintf(L"[1] - ZoomEye parser [requires auth]\n");
	wprintf(L"[2] - Defeway exploit\n");
	wprintf(L"[3] - HiSilicon exploit\n");
	wprintf(L"[4] - Hikvision Master-key exploit\n");
	wprintf(L"[5] - Hikvision Bruteforce\n");
	wprintf(L"[6] - Run custom exploit\n");
	wprintf(L"[7] - IP RANGES LIST\n");
	std::cout << "" << std::endl;
	wprintf(L"[8] - INTERNAL SETTINGS\n");
	
}

void logo() {
	wprintf(LR"(
   _____        .__  __  .__          ___________              .__         .__  __   
  /     \  __ __|__|/  |_|__|         \_   _____/__  _________ |  |   ____ |__|/  |_ 
 /  \ /  \|  |  \  \   __\  |  ______  |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\
/    Y    \  |  /  ||  | |  | /_____/  |        \>    < |  |_> >  |_(  <_> )  ||  |  
\____|__  /____/|__||__| |__|         /_______  /__/\_ \|   __/|____/\____/|__||__|   
        \/                                    \/      \/|__|
	           by nightmare_ - (v1.0 Initial Alpha)															                         
)"); '\n';
	
}

// ================= GET USER INPUT =========================
char url1[256];
char url2[256];
char url3[256];
char url4[256];
char url5[256];
char url6[256];
char url7[256];
char url8[256];
char url9[256];
char url10[256];
char url11[256];
char url12[256];
char url13[256];
int site;
void visit_site() {
	
	if (site == 1) {
		strcat_s(url1, "https://www.countryipblocks.net/acl.php");
		ShellExecuteA(NULL, "open", url1, NULL, NULL, SW_SHOW);
	}
		
	if (site == 2) {
		strcat_s(url2, "https://2ip.ua");
		ShellExecuteA(NULL, "open", url2, NULL, NULL, SW_SHOW);
	}
	if (site == 3) {
		strcat_s(url3, "https://4it.me");
		ShellExecuteA(NULL, "open", url3, NULL, NULL, SW_SHOW);
	}
	if (site == 4) {
		strcat_s(url4, "https://www.ipaddresslocation.org/cidr/ip-ranges.php");
		ShellExecuteA(NULL, "open", url4, NULL, NULL, SW_SHOW);
	
			wprintf(L"Written by nightmare_ for sploitCAM Project.\n");
			wprintf(L"Written by nightmare_ for sploitCAM Project.\n");
			Sleep(100);
			input();
		}
		
		}
		break;
	default:
		colors.set_color(CL_YELLOW);
		wprintf(L"Not a valid choice. Please choose valid one.\n");
		colors.set_color(CL_WHITE);
		input();
		//run();
		break;
	}
}


// ================= MAIN THREAD =========================


int main()
{
	bool fIsRunAsAdmin = IsAppRunningAsAdminMode();
	if (!fIsRunAsAdmin) {
		MessageBoxA(NULL, "The program is not running as administrator.", "Multi-Exploit", MB_ICONERROR | MB_OK);
		return -1;
	}
	HWND hWnd = GetConsoleWindow();
	HANDLE hStd = GetStdHandle(STD_OUTPUT_HANDLE);
	if (SetWindowCompositionAttribute) {
		ACCENT_POLICY accent = { ACCENT_ENABLE_BLURBEHIND, 0, 0, 0 };
		WINDOWCOMPOSITIONATTRIBDATA data;
		data.Attrib = WCA_ACCENT_POLICY;
		data.pvData = &accent;
		data.cbData = sizeof(accent);
		SetWindowCompositionAttribute(hWnd, &data);
	}
	int horizontal = 0;
	int vertical = 0;
	GetDesktopResolution(horizontal, vertical);
	int hx = horizontal / 2;
	int vx = vertical / 2;
	SetWindowLong(hWnd, GWL_STYLE, GetWindowLong(hWnd, GWL_STYLE) & ~(WS_CAPTION | WS_THICKFRAME)); // remove title bar
	SetWindowPos(hWnd, NULL, 0, hx, vx, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED);
	CONSOLE_SCREEN_BUFFER_INFO csbi;
	GetConsoleScreenBufferInfo(hStd, &csbi);
	COORD scrollbar = { csbi.srWindow.Right - csbi.srWindow.Left + 1, csbi.srWindow.Bottom - csbi.srWindow.Top + 1 };
	SetConsoleScreenBufferSize(hStd, scrollbar);  // remove scroll bar
	auto title = skCrypt("Multi-Exploit ");
	SetConsoleTitleA(title);
	logo();
	init();
	int i = 0;
	
	if (bConnected) {
		init();
	} 
	
	if (download) {
	input();
}
if (!pChoice) {
	wprintf(L"Not a valid choice");
		colors.set_color(CL_WHITE);
		input();
		run();
		system("pause");
	}
	run();
}	
	//colors.set_color(CL_GREEN);
	//std::cout << "Exploit finished work. Wanna launch one more?\n" << std::endl;
	//colors.set_color(CL_WHITE);
	//std::cin >> launchmore;
	//if ((launchmore) && (launchmore == 1)) {
		//input();
	//	run();
//	}


